plugins {
	id 'org.springframework.boot' version '2.5.2'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	// add
	id 'maven-publish'
	id 'jacoco'
	id 'com.diffplug.spotless' version '5.11.1'
	id 'com.gorylenko.gradle-git-properties' version '2.3.1'
	id 'org.sonarqube' version '3.3'
	id 'org.owasp.dependencycheck' version '6.2.2'
	id 'org.openapi.generator' version '5.1.1'
	// doc
	id 'org.asciidoctor.jvm.convert' version '3.1.0'
	id 'org.asciidoctor.jvm.pdf' version '3.1.0'
	id 'io.github.lhotari.swagger2markup' version '1.3.3.1'
}

group = 'com.github.cloud-technology'
version = '0.0.1'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2020.0.3")
	set('testcontainersVersion', "1.15.3")
	// add
	set('springfoxVersion', "3.0.0")
	set('mapstructVersion', "1.4.2.Final")
	set('archunitVersion', "0.18.0")
	set('lombokMapstructBindingVersion', "0.2.0")
	set('chaosMonkeyVersion', "2.4.5")
	// OpenAPI input file
	set('openapiInputSpec', "${rootDir}/specs/openapi.yml")
	// Output dir
	set('openapiOutputDir', "${rootDir}/generated/springboot")
	// set('openapiOutputDir', "${rootDir}")
	// set('openapiTemplateDir', "${rootDir}/template") // If customization need add template dir
	set('openapiInvokerPackage', "com.github.ct")
	// Controller
	set('openapiApiPackage', "${openapiInvokerPackage}.${rootProject.name}.interfaces.rest")
	// Models
	set('openapiModelPackage', "${openapiInvokerPackage}.${rootProject.name}.interfaces.rest.dto")
	// JavaConfig
	set('openapiConfigPackage', "${openapiInvokerPackage}.configuration")
	set('apiDocPath', "${buildDir}/swagger/api.json")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.liquibase:liquibase-core'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'
	// mapstruct
	implementation "org.mapstruct:mapstruct:${mapstructVersion}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
	// Swagger
	implementation "io.springfox:springfox-boot-starter:${springfoxVersion}"
	implementation "io.springfox:springfox-swagger-ui:${springfoxVersion}"
	implementation "io.springfox:springfox-data-rest:${springfoxVersion}"
	// UnitTest
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
	// ArchUnit
	testImplementation "com.tngtech.archunit:archunit:${archunitVersion}"
	// chaos-monkey
	implementation "de.codecentric:chaos-monkey-spring-boot:${chaosMonkeyVersion}"
}

dependencyManagement {
	imports {
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

test {
	useJUnitPlatform()
	systemProperty 'apiDocPath', "${apiDocPath}"
	finalizedBy jacocoTestReport // report is always generated after tests run
	testLogging.showStandardStreams = true
}

jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
	reports {
		xml.enabled true
		csv.enabled false
		html.enabled true
	}
}

gitProperties {
	failOnNoGitDirectory = false
}

// ./gradlew spotlessApply
spotless {
	encoding 'UTF-8' // all formats will be interpreted as UTF-8
	java {
		target 'src/**/*.java'
		toggleOffOn()
		googleJavaFormat()
		removeUnusedImports()
		importOrder()
		trimTrailingWhitespace()
		endWithNewline()
	}
	sql {
		target 'src/**/*.sql'
		dbeaver()
	}
	groovyGradle {
		target '*.gradle'
		greclipse()
	}
	format 'xml', {
		target 'src/**/*.xml'
		eclipseWtp('xml')
	}
}


// ./gradlew convertSwagger2markup
// 產生到 asciidoc 下 definitions.adoc overview.adoc paths.adoc security.adoc
convertSwagger2markup {
	swaggerInput file("${apiDocPath}").getAbsolutePath()
	outputFile file("${buildDir}/swagger/api")
	// outputDir file("index")
	config = [
		'swagger2markup.markupLanguage' : 'ASCIIDOC',
		'swagger2markup.pathsGroupedBy' : 'TAGS',
		'swagger2markup.outputLanguage': 'EN',
		'swagger2markup.generatedExamplesEnabled': true,
		'swagger2markup.inlineSchemaEnabled': false
	]
}

// ./gradlew asciidoctor
asciidoctor {
	sourceDir file("${buildDir}/swagger")
	sources {
		include 'api.adoc'
	}
	attributes 'doctype': 'book',
	'icons': 'font',
	'source-highlighter': 'highlightjs',
	'toc': 'left',
	'toclevels': 2,
	'sectlinks': true
	outputOptions {
		backends = ['html5', 'pdf']
	}
	outputDir file('publish')
}

// 透過 OpenAPI 產生 API 介面
// ./gradlew openApiGenerate
openApiGenerate {
	generatorName = "spring"
	library = "spring-boot"
	inputSpec = "${openapiInputSpec}"
	outputDir = "${openapiOutputDir}"
	// templateDir = "${openapiTemplateDir}"
	invokerPackage = "${openapiInvokerPackage}"
	apiPackage = "${openapiApiPackage}"
	modelPackage = "${openapiModelPackage}"
	configOptions = [
		configPackage: "${openapiConfigPackage}",
		dateLibrary: "java8",
		openApiNullable: "false",
		disallowAdditionalPropertiesIfNotPresent: "false",
		groupId: "${group}",
		hateoas: "false",
		interfaceOnly: "true",
		licenseName: "Unlicense",
		singleContentTypes: "true", // Whether to select only one produces/consumes content-type by operation.
		title: "${rootProject.name}",
		unhandledException: "true", // Declare operation methods to throw a generic exception and allow unhandled exceptions
		useTags: "true", // use tags for creating interface and controller classnames
		useOptional: "true"
	]
}

// ./gradlew externalServiceInterfaceGenerator
task externalServiceInterfaceGenerator(){
	println 'OpenApiGenerate Start!!'
}

externalServiceInterfaceGenerator.dependsOn('buildGoodsFeignClient')
externalServiceInterfaceGenerator.dependsOn('buildOrdersFeignClient')
// externalServiceInterfaceGenerator.dependsOn('buildGoClient')
// externalServiceInterfaceGenerator.dependsOn('buildAngularClient')

task buildGoodsFeignClient(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask){
	generatorName = "spring"
	library= "spring-cloud"
	inputSpec = "specs/openapi-goods.yml"
	outputDir = "${rootDir}/generated/client/feign".toString()
	// templateDir = "${openapiTemplateDir}"
	invokerPackage = "${openapiInvokerPackage}"
	apiPackage = "${openapiInvokerPackage}.${rootProject.name}.application.internal.outboundservices.acl"
	modelPackage = "${openapiInvokerPackage}.shareddomain.goods.dto"
	configOptions = [
		configPackage: "${openapiConfigPackage}",
		dateLibrary: "java8",
		openApiNullable: "false",
		disallowAdditionalPropertiesIfNotPresent: "false",
		groupId: "${group}",
		hateoas: "false",
		interfaceOnly: "false",
		licenseName: "Unlicense",
		singleContentTypes: "true",
		title: "${rootProject.name}",
		unhandledException: "true",
		useTags: "true",
		useOptional: "true"
	]
}

task buildOrdersFeignClient(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask){
	generatorName = "spring"
	library= "spring-cloud"
	inputSpec = "specs/openapi-orders.yml"
	outputDir = "${rootDir}/generated/client/feign".toString()
	// templateDir = "${openapiTemplateDir}"
	invokerPackage = "${openapiInvokerPackage}"
	apiPackage = "${openapiInvokerPackage}.${rootProject.name}.application.internal.outboundservices.acl"
	modelPackage = "${openapiInvokerPackage}.shareddomain.orders.dto"
	configOptions = [
		configPackage: "${openapiConfigPackage}",
		dateLibrary: "java8",
		openApiNullable: "false",
		disallowAdditionalPropertiesIfNotPresent: "false",
		groupId: "${group}",
		hateoas: "false",
		interfaceOnly: "false",
		licenseName: "Unlicense",
		singleContentTypes: "true",
		title: "${rootProject.name}",
		unhandledException: "true",
		useTags: "true",
		useOptional: "true"
	]
}

task buildGoClient(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask){
	generatorName = "go"
	inputSpec = "${openapiInputSpec}"
	outputDir = "${rootDir}/generated/client/go".toString()
}

task buildAngularClient(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask){
	generatorName = "typescript-angular"
	inputSpec = "${openapiInputSpec}"
	outputDir = "${rootDir}/generated/client/angular".toString()
}